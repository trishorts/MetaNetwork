pnorm(sampleRnorm)
rf(n = 500, 4, 4)
pnorm(rf(n = 500, 4, 4))
?p.adjust
?cor.test
0.005^12
.955^12
library(shiny)
convertAccessions <- function(wgcnaResults,
convertTo = "external_gene_name",
filterBy = "uniprot_gn_id",
mart){
sheetNumber <- length(wgcnaResults)
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
for(i in seq_len(sheetNumber)){
ConvertedGeneSymbols[[i]] <- getBM(attributes = convertTo,
filters = filterBy, mart = mart,
values = UniprotAcessions[[i]])$external_gene_name
}
return(ConvertedGeneSymbols)
}
usethis::use_test()
require(tidyverse)
read_csv("./tests/TestDataSet/LightCyanTestAccessions.txt")
testAccessions <- read_csv("./tests/TestDataSet/LightCyanTestAccessions.txt")
usethis::use_test()
fetchMart("Human")
BiocManager::install("biomaRt", update = FALSE)
library(biomaRt)
fetchMart("Human")
mart <- fetchMart("Human")
mart
useMart("ensembl", dataset = "mmusculus_gene_ensembl")
testMart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
fetchMart <- function(species){
ensembl <- useMart("ensembl")
if(species == "Human"){
ensembl <- useDataset("hsapiens_gene_ensembl", mart = ensembl)
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
} else if(species == "Mouse"){
ensembl <- useDataset("mmusculus_gene_ensembl", mart = ensembl)
mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
}
if(is.null(mart) == FALSE){
message("Successfully retrieved database")}else{
stop("Error in database retrieval")
}
return(mart)
}
mart <- fetchMart("Human")
mart
library(testthat)
?test_examples
fetchMart("Human")
testConversions <-  convertAccessions(testAccessions)
testConversions <-  convertAccessions(testAccessions, mart = mart)
testAccessions <- read_csv("./tests/TestDataSet/LightCyanTestAccessions.txt")
testConversions <-  convertAccessions(testAccessions, mart = mart)
testConversions <-  convertAccessions(testAccessions, mart = mart)
## Convert Uniprot Accessions
convertAccessions <- function(wgcnaResults,
convertTo = "external_gene_name",
filterBy = "uniprot_gn_id",
mart){
sheetNumber <- length(wgcnaResults)
if(sheetNumber > 2){
UniprotAcessions <- wgcnaResults[,1]}
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
for(i in seq_len(sheetNumber)){
ConvertedGeneSymbols[[i]] <- getBM(attributes = convertTo,
filters = filterBy, mart = mart,
values = UniprotAcessions[[i]])$external_gene_name
}
return(ConvertedGeneSymbols)
}
testConversions <-  convertAccessions(testAccessions, mart = mart)
## Convert Uniprot Accessions
convertAccessions <- function(wgcnaResults,
convertTo = "external_gene_name",
filterBy = "uniprot_gn_id",
mart){
sheetNumber <- length(wgcnaResults)
if(sheetNumber > 2){
UniprotAcessions <- wgcnaResults[,1]
}else{
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
}
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
for(i in seq_len(sheetNumber)){
ConvertedGeneSymbols[[i]] <- getBM(attributes = convertTo,
filters = filterBy, mart = mart,
values = UniprotAcessions[[i]])$external_gene_name
}
return(ConvertedGeneSymbols)
}
testConversions <-  convertAccessions(testAccessions, mart = mart)
## Convert Uniprot Accessions
convertAccessions <- function(wgcnaResults,
convertTo = "external_gene_name",
filterBy = "uniprot_gn_id",
mart){
sheetNumber <- length(wgcnaResults)
if(sheetNumber ==  1){
UniprotAcessions <- wgcnaResults[,1]
}else{
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
}
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
for(i in seq_len(sheetNumber)){
ConvertedGeneSymbols[[i]] <- getBM(attributes = convertTo,
filters = filterBy, mart = mart,
values = UniprotAcessions[[i]])$external_gene_name
}
return(ConvertedGeneSymbols)
}
testConversions <-  convertAccessions(testAccessions, mart = mart)
## Convert Uniprot Accessions
convertAccessions <- function(wgcnaResults,
convertTo = "external_gene_name",
filterBy = "uniprot_gn_id",
mart){
sheetNumber <- length(wgcnaResults)
if(sheetNumber <  2){
UniprotAcessions <- wgcnaResults[,1]
}else{
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
}
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
for(i in seq_len(sheetNumber)){
ConvertedGeneSymbols[[i]] <- getBM(attributes = convertTo,
filters = filterBy, mart = mart,
values = UniprotAcessions[[i]])$external_gene_name
}
return(ConvertedGeneSymbols)
}
testConversions <-  convertAccessions(testAccessions, mart = mart)
testConversions
testAccessions
length(testAccessions)
length(testAccessions[[1]])
length(testAccessions[[1]])
length(testConversions)
length(testConversions[[1]])
unique(testConversions[[1]])
length(unique(testAccessions[[1]]))
expect_equal(length(testConversions[[1]], 33))
expect_equal(length(testConversions[[1]]), 33)
source('~/GitHub/MetaNetwork/tests/testthat/test-enrichAllez.R', echo=TRUE)
if(sheetNumber == 1){
UniprotAcessions <- wgcnaResults[,1]
}else{
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
}
convertAccessions(LightCyanTestAccessions, mart = mart)
LightCyanTestAccessions
convertAccessions(LightCyanTestAccessions)
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
## Convert Uniprot Accessions
convertAccessions <- function(wgcnaResults,
convertTo = "external_gene_name",
filterBy = "uniprot_gn_id",
mart){
sheetNumber <- length(wgcnaResults)
if(sheetNumber == 1){
UniprotAcessions <- wgcnaResults[,1]
}else{
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
}
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
for(i in seq_len(sheetNumber)){
ConvertedGeneSymbols[[i]] <- getBM(attributes = convertTo,
filters = filterBy, mart = mart,
values = UniprotAcessions[[i]])$external_gene_name
}
return(ConvertedGeneSymbols)
}
convertAccessions(LightCyanTestAccessions, mart = mart)
## Convert Uniprot Accessions
convertAccessions <- function(wgcnaResults,
convertTo = "external_gene_name",
filterBy = "uniprot_gn_id",
mart){
sheetNumber <- length(wgcnaResults)
if(sheetNumber == 1){
UniprotAcessions <- wgcnaResults[,1]
}else{
UniprotAcessions <- list()
for(i in seq_len(sheetNumber)){
UniprotAcessions[[i]] <- wgcnaResults[[i]][,1]
}
}
ModuleNames <- names(wgcnaResults)
names(UniprotAcessions) <- ModuleNames
ConvertedGeneSymbols <- list()
for(i in seq_len(sheetNumber)){
ConvertedGeneSymbols[[i]] <- getBM(attributes = convertTo,
filters = filterBy, mart = mart,
values = UniprotAcessions[[i]])$external_gene_name
}
return(ConvertedGeneSymbols)
}
convertAccessions(LightCyanTestAccessions, mart = mart)
length(LightCyanTestAccessions)
testUniverse <- read_csv(file.path("tests", "TestDataSet", "Unsupervised_data.csv"))
LightCyanTestAccessions <- read_csv("./")
LightCyanTestAccessions <- read_csv("./tests/TestDataSet/LightCyanTestAccessions.txt")
## testConversions is explicily tested while fetchMart is implicitly tested
testAccessions <- read_csv("./tests/TestDataSet/LightCyanTestAccessions.txt",
col_names = FALSE)
expect_equal(length(testConversions[[1]]), 34)
testConversions <-  convertAccessions(testAccessions, mart = mart)
expect_equal(length(testConversions[[1]]), 34)
LightCyanTestAccessions <- read_csv("./tests/TestDataSet/LightCyanTestAccessions.txt",
col_names = FALSE)
convertAccessions(LightCyanTestAccessions, mart = mart)
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
rlang::last_error()
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
n
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
allez
allez
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
?allez
library(allez)
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
detach("package:BiocGenerics", unload = TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
library(BiocGenerics)
enrichAllez <- function(GeneSymbols, GeneUniverse, SpeciesLibrary = "org.Hs.eg", idtype = "SYMBOL",
alter = TRUE, Lowersetsize = 5, Uppsersetsize = 500, outprefix, ...){
Scores <- rep(0, length(GeneUniverse))
names(Scores) <- as.vector(GeneUniverse)
Scores[base::intersect(names(Scores), GeneSymbols)] <- 1
allezOutput <- allez(scores = Scores,
lib = SpeciesLibrary,
idtype = "SYMBOL", library.loc = GeneSymbols)
message("Allez enrichment completed")
if(length(allezOutput$Term) == 0) message("Warning: output is blank")
return(allezOutput)
}
testAllezEnrichment <- enrichAllez(GeneSymbols = LightCyanTestAccessions,
GeneUniverse = testUniverse)
LightCyanTestAccessions
!duplicated(LightCyanTestAccessions)
!base::duplicated(LigthCyanTestAccession)
!base::duplicated(LigthCyanTestAccessions)
!base::duplicated(LightCyanTestAccessions)
testGeneSymbols <- convertAccessions(LightCyanTestAccessions, mart = mart)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols,
GeneUniverse = testUniverse)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testUniverse)
testGeneSybmolsUniverse <- convertAccessions(testUniverse, mart = mart)
testGeneSymbolsUniverse <- convertAccessions(testUniverse, mart = mart)
testUniverse
testUniverse
testUniverse[[1]]
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testGeneSymbolsUniverse <- convertAccessions(testUniverse, mart = mart)
testGeneSymbolsUniverse <- convertAccessions(testUniverse[[1]], mart = mart)
testGeneSymbolsUniverse <- convertAccessions(testUniverse[[1]], mart = mart)
testGeneSymbolsUniverse <- convertAccessions(testUniverse[1], mart = mart)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment
View(testAllezEnrichment)
names(testAllezEnrichment)
enrichAllez <- function(GeneSymbols, GeneUniverse, SpeciesLibrary = "org.Hs.eg", idtype = "SYMBOL",
alter = TRUE, Lowersetsize = 5, Uppsersetsize = 500, outprefix, ...){
Scores <- rep(0, length(GeneUniverse))
names(Scores) <- as.vector(GeneUniverse)
Scores[base::intersect(names(Scores), GeneSymbols)] <- 1
allezOutput <- allez(scores = Scores,
lib = SpeciesLibrary,
idtype = "SYMBOL", library.loc = GeneSymbols)
message("Allez enrichment completed")
if(length(allezOutput$setscores) == 0) message("Warning: output is blank")
return(allezOutput)
}
length(testAllezEnrichment$setscores)
length(testAllezEnrichment$setscores$Term)
expect_equal(length(testAllezEnrichment$setscores$Term), 14360)
testAllezEnrichment$aux
testAllezEnrichment$aux$set.data
testAllezEnrichment$setscores
head(testAllezEnrichment$setscores)
rownames(testAllezEnrichment$setscores)
rownames_to_column(allezOutput)
enrichAllez <- function(GeneSymbols, GeneUniverse, SpeciesLibrary = "org.Hs.eg", idtype = "SYMBOL",
alter = TRUE, Lowersetsize = 5, Uppsersetsize = 500, outprefix, ...){
Scores <- rep(0, length(GeneUniverse))
names(Scores) <- as.vector(GeneUniverse)
Scores[base::intersect(names(Scores), GeneSymbols)] <- 1
allezOutput <- allez(scores = Scores,
lib = SpeciesLibrary,
idtype = "SYMBOL", library.loc = GeneSymbols)
rownames_to_column(allezOutput)
message("Allez enrichment completed")
if(length(allezOutput$setscores) == 0) message("Warning: output is blank")
return(allezOutput)
}
allezOutput <- allez(scores = Scores,
lib = SpeciesLibrary,
idtype = "SYMBOL", library.loc = GeneSymbols)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
allezOutput$setscores <- rownames_to_column(allezOutput$setscores)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
allezOutput$setscores <- rownames_to_column(tibble(allezOutput$setscores))
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
enrichAllez <- function(GeneSymbols, GeneUniverse, SpeciesLibrary = "org.Hs.eg", idtype = "SYMBOL",
alter = TRUE, Lowersetsize = 5, Uppsersetsize = 500, outprefix, ...){
Scores <- rep(0, length(GeneUniverse))
names(Scores) <- as.vector(GeneUniverse)
Scores[base::intersect(names(Scores), GeneSymbols)] <- 1
allezOutput <- allez(scores = Scores,
lib = SpeciesLibrary,
idtype = "SYMBOL", library.loc = GeneSymbols)
allezOutput$setscores <- rownames_to_column(data.frame(allezOutput$setscores))
message("Allez enrichment completed")
if(length(allezOutput$setscores) == 0) message("Warning: output is blank")
return(allezOutput)
}
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment
testAllezEnrichment$setscores
View(testAllezEnrichment$setscores)
enrichAllez <- function(GeneSymbols, GeneUniverse, SpeciesLibrary = "org.Hs.eg", idtype = "SYMBOL",
alter = TRUE, Lowersetsize = 5, Uppsersetsize = 500, outprefix, ...){
Scores <- rep(0, length(GeneUniverse))
names(Scores) <- as.vector(GeneUniverse)
Scores[base::intersect(names(Scores), GeneSymbols)] <- 1
allezOutput <- allez(scores = Scores,
lib = SpeciesLibrary,
idtype = "SYMBOL", library.loc = GeneSymbols)
allezOutput$setscores <- rownames_to_column(`GO:ID` = data.frame(allezOutput$setscores))
message("Allez enrichment completed")
if(length(allezOutput$setscores) == 0) message("Warning: output is blank")
return(allezOutput)
}
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
?rownames_to_column
allezOutput$setscores <- rownames_to_column(data.frame(allezOutput$setscores),
var = "GO_Term_ID")
enrichAllez <- function(GeneSymbols, GeneUniverse, SpeciesLibrary = "org.Hs.eg", idtype = "SYMBOL",
alter = TRUE, Lowersetsize = 5, Uppsersetsize = 500, outprefix, ...){
Scores <- rep(0, length(GeneUniverse))
names(Scores) <- as.vector(GeneUniverse)
Scores[base::intersect(names(Scores), GeneSymbols)] <- 1
allezOutput <- allez(scores = Scores,
lib = SpeciesLibrary,
idtype = "SYMBOL", library.loc = GeneSymbols)
allezOutput$setscores <- rownames_to_column(data.frame(allezOutput$setscores),
var = "GO_Term_ID")
message("Allez enrichment completed")
if(length(allezOutput$setscores) == 0) message("Warning: output is blank")
return(allezOutput)
}
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
head(testAllezEnrichment$setscores)
expect_equal(base::colnames(testAllezEnrichment$setscores)[,1], "GO_Term_ID")
expect_equal(base::colnames(testAllezEnrichment$setscores)[1], "GO_Term_ID")
testAllezEnrichment$aux
head(testAllezEnrichment$aux$set.data)
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
head(testAllezEnrichment)
head(testAllezEnrichment$setscores)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
source('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
debugSource('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
pnorm(testAllezEnrichment$setscores$z.score)
debugSource('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment
View(testAllezEnrichment)
View(testAllezEnrichment)
head(testAllezEnrichment)
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
View(testAllezEnrichment)
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
colnames(testAllezEnrichment$setscores)
rownames(testAllezEnrichment$setscores)
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
rownames(testAllezEnrichment$setscores)
?rownames_to_column
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
source('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
source('~/GitHub/MetaNetwork/R/enrichAllez.R', echo=TRUE)
source('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
source('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
head(testAllezEnrichment$setscores)
View(testAllezEnrichment$setscores)
source('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
colnames(testAllezEnrichment$setscores)
View(createAllezEnrichmentXLSX)
source('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
testAllezEnrichment$setscores
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
View(testAllezEnrichment$setscores$p.adj)
source('~/GitHub/MetaNetwork/R/addPvaluesToAllezOutput.R', echo=TRUE)
testAllezEnrichment <- enrichAllez(GeneSymbols = testGeneSymbols[[1]],
GeneUniverse = testGeneSymbolsUniverse[[1]])
head(testAllezEnrichment$setscores)
0.006^12
.8^12
testAllezEnrichment$setscores
View(testAllezEnrichment$setscores)
setwd("~/")
