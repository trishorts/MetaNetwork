{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        3,
        0,
        3,
        0,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    "data": [
        "\nR version 4.0.2 (2020-06-22) -- \"Taking Off Again\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from ~/GitHub/MetaNetwork/.RData]\n\n",
        "> ",
        "data <- cbind(rnorm(n = 100, mean = 20, sd = 4), rnorm(n = 100, mean = 20, sd = 4))",
        "> ",
        "pdfFunctionTesting <- function(data){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data)",
        "null device \n          1 \n",
        "> ",
        "data <- cbind(rnorm(n = 100, mean = 20, sd = 4), rnorm(n = 100, mean = 20, sd = 4))",
        "> ",
        "pdfFunctionTesting <- function(data){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  h = 0.2",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data)",
        "null device \n          1 \n",
        "> ",
        "pdfFunctionTesting <- function(data){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h=RCutoff,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data)",
        "Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : \n  object 'RCutoff' not found\n",
        "> ",
        "Rcutoff <- 0.85",
        "> ",
        "pdfFunctionTesting <- function(data, Rcutoff = Rcutoff){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h=RCutoff,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data)",
        "Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : \n  object 'RCutoff' not found\n",
        "> ",
        "Rcutoff <- 0.85",
        "> ",
        "pdfFunctionTesting(data, Rcutoff)",
        "Error in abline(h = RCutoff, col = \"red\") : object 'RCutoff' not found\n",
        "> ",
        "Rcutoff <- 0.85",
        "> ",
        "pdfFunctionTesting <- function(data, Rcutoff = Rcutoff){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h=RCutoff,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, Rcutoff)",
        "Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : \n  object 'RCutoff' not found\n",
        "> ",
        "Rcutoff <- 0.85",
        "> ",
        "pdfFunctionTesting <- function(data, Rcutoff = Rcutoff){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(RCutoff,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, Rcutoff)",
        "Error in abline(RCutoff, col = \"red\") : object 'RCutoff' not found\n",
        "> ",
        "pdfFunctionTesting <- function(data, Rcutoff){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(RCutoff,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, Rcutoff)",
        "Error in abline(RCutoff, col = \"red\") : object 'RCutoff' not found\n",
        "> ",
        "?abline",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "Error in pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff) : \n  unused argument (scaleFreeThreshold = Rcutoff)\n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h = scaleFreeThreshold,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "pdf \n  2 \n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold){",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h = scaleFreeThreshold,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "  plot.new(); dev.off()",
        "pdf \n  3 \n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold){",
        "+ ",
        "  plot.new(); dev.off()",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h = scaleFreeThreshold,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "pdf \n  4 \n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold){",
        "+ ",
        "  graphics.off()",
        "+ ",
        "  pdf(\"DataTesting.pdf\")",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h = scaleFreeThreshold,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "null device \n          1 \n",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "Error in pdf(\"DataTesting.pdf\") : cannot open file 'DataTesting.pdf'\n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...){",
        "Error: unexpected symbol in \"pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...\"\n",
        "> ",
        "  graphics.off()",
        "> ",
        "  pdf()",
        "> ",
        "  plot(data)",
        "> ",
        "  abline(h = scaleFreeThreshold,col=\"red\")",
        "Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : \n  object 'scaleFreeThreshold' not found\n",
        "> ",
        "  dev.off()",
        "null device \n          1 \n",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...){",
        "Error: unexpected symbol in \"pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...\"\n",
        "> ",
        "  graphics.off()",
        "> ",
        "  pdf()",
        "> ",
        "  plot(data)",
        "> ",
        "  abline(h = scaleFreeThreshold,col=\"red\")",
        "Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : \n  object 'scaleFreeThreshold' not found\n",
        "> ",
        "  dev.off()",
        "null device \n          1 \n",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "\n",
        "> ",
        "\n",
        "> ",
        "\n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...){",
        "Error: unexpected symbol in \"pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...\"\n",
        "> ",
        "  graphics.off()",
        "> ",
        "  pdf()",
        "> ",
        "  plot(data)",
        "> ",
        "  abline(h = scaleFreeThreshold, col=\"red\")",
        "Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : \n  object 'scaleFreeThreshold' not found\n",
        "> ",
        "  dev.off()",
        "null device \n          1 \n",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "View(pdfFunctionTesting)",
        "> ",
        "data <- cbind(rnorm(n = 100, mean = 20, sd = 4), rnorm(n = 100, mean = 20, sd = 4))",
        "> ",
        "Rcutoff <- 0.85",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...){",
        "Error: unexpected symbol in \"pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\"...\"\n",
        "> ",
        "  graphics.off()",
        "> ",
        "  pdf()",
        "> ",
        "  plot(data)",
        "> ",
        "  abline(h = scaleFreeThreshold, col=\"red\")",
        "Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) : \n  object 'scaleFreeThreshold' not found\n",
        "> ",
        "  dev.off()",
        "null device \n          1 \n",
        "> ",
        "}",
        "Error: unexpected '}' in \"}\"\n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\",...){",
        "+ ",
        "  graphics.off()",
        "+ ",
        "  pdf()",
        "+ ",
        "  plot(data)",
        "+ ",
        "  abline(h = scaleFreeThreshold, col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "null device \n          1 \n",
        "> ",
        "?abline",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, file = \"DataTesting.pdf\",...){",
        "+ ",
        "  graphics.off()",
        "+ ",
        "  pdf()",
        "+ ",
        "    plot(data)",
        "+ ",
        "    abline(h = scaleFreeThreshold, col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "Error in pdf() : cannot open file 'Rplots.pdf'\n",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, fileName = \"pdfPlot.pdf\",...){",
        "+ ",
        "  graphics.off()",
        "+ ",
        "  pdf(file = fileName)",
        "+ ",
        "    plot(data)",
        "+ ",
        "    abline(h = scaleFreeThreshold, col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "null device \n          1 \n",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "null device \n          1 \n",
        "> ",
        "Rcutoff <- 20",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, fileName = \"pdfPlot.pdf\",...){",
        "+ ",
        "  graphics.off()",
        "+ ",
        "  pdf(file = fileName)",
        "+ ",
        "    plot(data)",
        "+ ",
        "    abline(h = scaleFreeThreshold, col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "Error in pdf(file = fileName) : cannot open file 'pdfPlot.pdf'\n",
        "> ",
        "data <- cbind(rnorm(n = 100, mean = 20, sd = 4), rnorm(n = 100, mean = 20, sd = 4))",
        "> ",
        "Rcutoff <- 20",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, fileName = \"pdfPlot.pdf\",...){",
        "+ ",
        "  graphics.off()",
        "+ ",
        "  pdf(file = fileName)",
        "+ ",
        "    plot(data)",
        "+ ",
        "    abline(h = scaleFreeThreshold, col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "Error in pdf(file = fileName) : cannot open file 'pdfPlot.pdf'\n",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "null device \n          1 \n",
        "> ",
        "set.seed(54321)",
        "> ",
        "data <- cbind(rnorm(n = 100, mean = 20, sd = 4), rnorm(n = 100, mean = 20, sd = 4))",
        "> ",
        "Rcutoff <- 20",
        "> ",
        "pdfFunctionTesting <- function(data, scaleFreeThreshold, fileName = \"pdfPlot.pdf\",...){",
        "+ ",
        "  graphics.off()",
        "+ ",
        "  pdf(file = fileName)",
        "+ ",
        "    plot(data)",
        "+ ",
        "    abline(h = scaleFreeThreshold, col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "pdfFunctionTesting(data, scaleFreeThreshold = Rcutoff)",
        "null device \n          1 \n",
        "> ",
        "plotScalFreeTopology <- function(fileName = \"Results/ScaleFreeTopology.pdf\", ",
        "+ ",
        "                                 cex1 = 0.9, scaleFreeThreshold){",
        "+ ",
        "  pdf(fileName, width = 10)",
        "+ ",
        "    par(mfrow = c(1,2));",
        "+ ",
        "    cex1 = 0.9;",
        "+ ",
        "    # Scale-free topology fit index as a function of the soft-thresholding power",
        "+ ",
        "    plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],",
        "+ ",
        "         xlab=\"Soft Threshold (power)\",ylab=\"Scale Free Topology Model Fit,signed R^2\",type=\"n\",",
        "+ ",
        "         main = paste(\"Scale independence\"));",
        "+ ",
        "    text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],",
        "+ ",
        "         labels=powers,cex=cex1,col=\"red\");",
        "+ ",
        "    # this adds the red line corresponding to R^2. Default = 0.85",
        "+ ",
        "    abline(h=scaleFreeThreshold,col=\"red\")",
        "+ ",
        "    # Mean connectivity as a function of the soft-thresholding power",
        "+ ",
        "    plot(sft$fitIndices[,1], sft$fitIndices[,5],",
        "+ ",
        "         xlab=\"Soft Threshold (power)\",ylab=\"Mean Connectivity\", type=\"n\",",
        "+ ",
        "         main = paste(\"Mean connectivity\"))",
        "+ ",
        "    text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col=\"red\")",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "plotSampleClusteringDendro <- function(dendro, fontSize = 15, ",
        "+ ",
        "                                       fileName = \"SampleClustering.pdf\"){",
        "+ ",
        "sampleClusteringQC  <- ggdendrogram(dendro)+",
        "+ ",
        "  ggtitle(\"Sample Clustering to Detect Outliers\")+",
        "+ ",
        "  xlab(\"Sample\")+",
        "+ ",
        "  ylab(\"Height\")+",
        "+ ",
        "  theme_bw(base_size = fontSize)",
        "+ ",
        "ggsave(filename = fileName, path = \"Results\", plot = last_plot())",
        "+ ",
        "}",
        "> ",
        "PlotEigenproteinClusteringPostMerge <- function(preMergeDendroData, ",
        "+ ",
        "                                                postMergeDendroData, ",
        "+ ",
        "                                                fileName = \"Results/ModuleEigenproteinMergeDendrogram.pdf\", ",
        "+ ",
        "                                                widthInches = 10){",
        "+ ",
        "  premergeDendro <- plot(METree, main = \"Clustering of module eigenproteins, pre-merging\", xlab = \"\", sub = \"\")",
        "+ ",
        "  postmergeDendro <- plot(mergedClust$dendro, main = \"Clustering of module eigenproteins, post-merging\", xlab = \"\",",
        "+ ",
        "                          sub = \"\")",
        "+ ",
        "  ",
        "+ ",
        "  pdf(file = fileName, width = widthInches)",
        "+ ",
        "  par(mfrow = c(2,1))",
        "+ ",
        "  par(cex = 0.6)",
        "+ ",
        "  premergeDendro",
        "+ ",
        "  abline(h = MCutHeight, col = \"red\")",
        "+ ",
        "  postmergeDendro",
        "+ ",
        "  dev.off()  ",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "plotEigenproteinClusteringPostMerge <- function(preMergeDendroData, ",
        "+ ",
        "                                                postMergeDendroData, ",
        "+ ",
        "                                                fileName = \"Results/ModuleEigenproteinMergeDendrogram.pdf\", ",
        "+ ",
        "                                                widthInches = 10){",
        "+ ",
        "  premergeDendro <- plot(METree, main = \"Clustering of module eigenproteins, pre-merging\", xlab = \"\", sub = \"\")",
        "+ ",
        "  postmergeDendro <- plot(mergedClust$dendro, main = \"Clustering of module eigenproteins, post-merging\", xlab = \"\",",
        "+ ",
        "                          sub = \"\")",
        "+ ",
        "  ",
        "+ ",
        "  pdf(file = fileName, width = widthInches)",
        "+ ",
        "  par(mfrow = c(2,1))",
        "+ ",
        "  par(cex = 0.6)",
        "+ ",
        "  premergeDendro",
        "+ ",
        "  abline(h = MCutHeight, col = \"red\")",
        "+ ",
        "  postmergeDendro",
        "+ ",
        "  dev.off()  ",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "plotEigenproteinClusteringPostMerge <- function(preMergeDendroData, ",
        "+ ",
        "                                                postMergeDendroData, ",
        "+ ",
        "                                                fileName = \"Results/ModuleEigenproteinMergeDendrogram.pdf\", ",
        "+ ",
        "                                                widthInches = 10){",
        "+ ",
        "  premergeDendro <- plot(preMergeDendroData, main = \"Clustering of module eigenproteins, pre-merging\", xlab = \"\", sub = \"\")",
        "+ ",
        "  postmergeDendro <- plot(postMergeDendroData, main = \"Clustering of module eigenproteins, post-merging\", xlab = \"\",",
        "+ ",
        "                          sub = \"\")",
        "+ ",
        "  ",
        "+ ",
        "  pdf(file = fileName, width = widthInches)",
        "+ ",
        "  par(mfrow = c(2,1))",
        "+ ",
        "  par(cex = 0.6)",
        "+ ",
        "  premergeDendro",
        "+ ",
        "  abline(h = MCutHeight, col = \"red\")",
        "+ ",
        "  postmergeDendro",
        "+ ",
        "  dev.off()  ",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "library(WGCNA)",
        "Loading required package: dynamicTreeCut\n",
        "Loading required package: fastcluster\n",
        "\nAttaching package: ‘fastcluster’\n\n",
        "The following object is masked from ‘package:stats’:\n\n    hclust\n\n",
        "\n",
        "\nAttaching package: ‘WGCNA’\n\n",
        "The following object is masked from ‘package:stats’:\n\n    cor\n\n",
        "> ",
        "?plotDendroAndColors",
        "> ",
        "?plotEigengeneNetworks",
        "> ",
        "plotEigenproteinsNetwork <- function(moduleEigenproteins, ",
        "+ ",
        "                              fileName = \"Results/DendrogramEigenproteins.pdf\", ",
        "+ ",
        "                              widthInches = 10){",
        "+ ",
        "  EigengeneNetworks <- plotEigengeneNetworks(MEs, \"EigenproteinNetwork\", ",
        "+ ",
        "                                             marHeatmap = c(3,4,2,2), ",
        "+ ",
        "                                             marDendro = c(3,4,2,5),",
        "+ ",
        "                                             plotDendrograms = TRUE, ",
        "+ ",
        "                                             xLabelsAngle = 90,",
        "+ ",
        "                                             heatmapColors=blueWhiteRed(50))",
        "+ ",
        "  pdf(file = fileName, width = widthInches)",
        "+ ",
        "  plotEigengeneNetworks(MEs, \"EigenproteinNetwork\", marHeatmap = c(3,4,2,2), marDendro = c(3,4,2,5),",
        "+ ",
        "                        plotDendrograms = TRUE, xLabelsAngle = 90,heatmapColors=blueWhiteRed(50))",
        "+ ",
        "  dev.off()",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "plotEigenproteinsNetwork <- function(moduleEigenproteins, ",
        "+ ",
        "                              fileName = \"Results/DendrogramEigenproteins.pdf\", ",
        "+ ",
        "                              widthInches = 10){",
        "+ ",
        "  EigengeneNetworks <- plotEigengeneNetworks(moduleEigenproteins, \"EigenproteinNetwork\", ",
        "+ ",
        "                                             marHeatmap = c(3,4,2,2), ",
        "+ ",
        "                                             marDendro = c(3,4,2,5),",
        "+ ",
        "                                             plotDendrograms = TRUE, ",
        "+ ",
        "                                             xLabelsAngle = 90,",
        "+ ",
        "                                             heatmapColors=blueWhiteRed(50))",
        "+ ",
        "  pdf(file = fileName, width = widthInches)",
        "+ ",
        "  EigengeneNetworks",
        "+ ",
        "  dev.off()",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "plotmoduleEigenproteinsHeatmap <- function(moduleEigenproteins, ",
        "+ ",
        "                                       fileName = \"Results/ModuleEigenproteinsHeatmap.pdf\", ",
        "+ ",
        "                                       widthInches = 10){",
        "+ ",
        "  modulesHeatmap <- heatmap3(moduleEigenproteins, ",
        "+ ",
        "                             distfun = function(x) dist(x, method=\"euclidean\"),",
        "+ ",
        "                             main = \"Module Eigenproteins\",",
        "+ ",
        "                             cexRow = 0.6, cexCol = 0.6)",
        "+ ",
        "  pdf(file = fileName, width = widthInches)",
        "+ ",
        "  heatmap3(moduleEigenproteins, distfun = function(x) dist(x, method=\"euclidean\"),",
        "+ ",
        "           main = \"Module Eigenproteins\",",
        "+ ",
        "           cexRow = 0.6, cexCol = 0.6)",
        "+ ",
        "  dev.off()  ",
        "+ ",
        "}",
        "> ",
        "plotTOM <- function(TOMData, ",
        "+ ",
        "                   proteinDendro, ",
        "+ ",
        "                   moduleColors, ",
        "+ ",
        "                   fileName = \"Results/NetworkHeatmap.png\"){",
        "+ ",
        "  tomplot <- TOMplot(TOMData, proteinDendro, moduleColors)",
        "+ ",
        "  ",
        "+ ",
        "  dev.new()",
        "+ ",
        "  png(filename = fileName)",
        "+ ",
        "  tomplot",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "plotAdjacencyHeatmap <- function(moduleEigenproteins, ",
        "+ ",
        "                                 fileName = \"Results/Eigenprotein_adjacency heatmap.pdf\", ",
        "+ ",
        "                                 widthInches = 10){",
        "+ ",
        "  MET <- orderMEs(MEs = moduleEigenproteins)",
        "+ ",
        "  EigenNetworksDendro <- plotEigengeneNetworks(MET, \"Eigenprotein Dendrogram\",",
        "+ ",
        "                                               marDendro = c(0,4,2,0), plotHeatmaps = FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  EigenNetworksHeatmap <- plotEigengeneNetworks(MET, \"Eigenprotein adjacency heatmap\",",
        "+ ",
        "                                                marDendro = c(3,4,2,2), xLabelsAngle = 90)",
        "+ ",
        "  ",
        "+ ",
        "  pdf(file = fileName, width = widthInches)",
        "+ ",
        "  par(cex = 1.0)",
        "+ ",
        "  EigenNetworksDendro",
        "+ ",
        "  EigenNetworksHeatmap",
        "+ ",
        "  dev.off()",
        "+ ",
        "}",
        "> ",
        "      library(devtools)",
        "Loading required package: usethis\n",
        "> ",
        "install_github(repo = \"atbroman/allez\")",
        "WARNING: Rtools is required to build R packages, but is not currently installed.\n\nPlease download and install Rtools 4.0 from https://cran.r-project.org/bin/windows/Rtools/.\n",
        "Skipping install of 'allez' from a github remote, the SHA1 (2a7a57b3) has not changed since last install.\n  Use `force = TRUE` to force installation\n",
        "> ",
        "      library(devtools)",
        "> ",
        "remove.packages(\"allez\", lib=\"~/R/win-library/4.0\")",
        "> ",
        "install_github(repo = \"atbroman/allez\", dependencies = TRUE)",
        "WARNING: Rtools is required to build R packages, but is not currently installed.\n\nPlease download and install Rtools 4.0 from https://cran.r-project.org/bin/windows/Rtools/.\n",
        "Downloading GitHub repo atbroman/allez@HEAD\n",
        "Skipping 5 packages not available: reactome.db, KEGG.db, GO.db, hgu133plus2.db, AnnotationDbi\n",
        "WARNING: Rtools is required to build R packages, but is not currently installed.\n\nPlease download and install Rtools 4.0 from https://cran.r-project.org/bin/windows/Rtools/.\n",
        "  \r  \r  \r   checking for file 'C:\\Users\\Khairina Ibrahim\\AppData\\Local\\Temp\\Rtmp4CFBxv\\remotes2db479fb2afe\\atbroman-allez-2a7a57b/DESCRIPTION' ...\r  \r\u001B[32m√\u001B[39m  \u001B[38;5;247mchecking for file 'C:\\Users\\Khairina Ibrahim\\AppData\\Local\\Temp\\Rtmp4CFBxv\\remotes2db479fb2afe\\atbroman-allez-2a7a57b/DESCRIPTION'\u001B[39m\u001B[36m\u001B[39m\n\r  \r  \r  \r\u001B[38;5;247m-\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mpreparing 'allez':\u001B[39m\u001B[36m\u001B[39m\n   checking DESCRIPTION meta-information ...\r  \r   checking DESCRIPTION meta-information ... \r  \r\u001B[32m√\u001B[39m  \u001B[38;5;247mchecking DESCRIPTION meta-information\u001B[39m\u001B[36m\u001B[39m",
        "\n\r  \r  \r  \r\u001B[38;5;247m-\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mchecking for LF line-endings in source and make files and shell scripts\u001B[39m\u001B[36m\u001B[39m\n\r  \r\u001B[38;5;247m-\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mchecking for empty or unneeded directories\u001B[39m\u001B[36m\u001B[39m\n\r  \r  \r  \r\u001B[38;5;247m-\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mbuilding 'allez_2.0.5.tar.gz'\u001B[39m\u001B[36m\u001B[39m\n\r  \r   \n\r",
        "Installing package into ‘C:/Users/Khairina Ibrahim/Documents/R/win-library/4.0’\n(as ‘lib’ is unspecified)\n",
        "* installing *source* package 'allez' ...\n** using staged installation\n** R\n** data\n*** moving datasets to lazyload DB\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n  converting help for package 'allez'\n    finding HTML links ... done\n    allez-internal                          html  \n    allez                                   html  \n    allezC                                  html  \n    allezMat                                html  \n    allezPlot                               html  \n",
        "    allezTable                              html  \n    list2score                              html  \n    npc                                     html  \n** building package indices\n** testing if installed package can be loaded from temporary location\n*** arch - i386\n*** arch - x64\n** testing if installed package can be loaded from final location\n*** arch - i386\n*** arch - x64\n** testing if installed package keeps a record of temporary installation path\n* DONE (allez)\n",
        "> ",
        "library(allez)",
        "Loading required package: AnnotationDbi\n",
        "Loading required package: stats4\n",
        "Loading required package: BiocGenerics\n",
        "Loading required package: parallel\n",
        "\nAttaching package: ‘BiocGenerics’\n\n",
        "The following objects are masked from ‘package:parallel’:\n\n    clusterApply, clusterApplyLB,\n    clusterCall, clusterEvalQ,\n    clusterExport, clusterMap, parApply,\n    parCapply, parLapply, parLapplyLB,\n    parRapply, parSapply, parSapplyLB\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    IQR, mad, sd, var, xtabs\n\n",
        "The following objects are masked from ‘package:base’:\n\n    anyDuplicated, append, as.data.frame,\n    basename, cbind, colnames, dirname,\n    do.call, duplicated, eval, evalq,\n    Filter, Find, get, grep, grepl,\n    intersect, is.unsorted, lapply, Map,\n    mapply, match, mget, order, paste,\n    pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce,\n    rownames, sapply, setdiff, sort,\n    table, tapply, union, unique, unsplit,\n    which, which.max, which.min\n\n",
        "Loading required package: Biobase\n",
        "Welcome to Bioconductor\n\n    Vignettes contain introductory\n    material; view with\n    'browseVignettes()'. To cite\n    Bioconductor, see\n    'citation(\"Biobase\")', and for\n    packages 'citation(\"pkgname\")'.\n\n",
        "Loading required package: IRanges\n",
        "Loading required package: S4Vectors\n",
        "\nAttaching package: ‘S4Vectors’\n\n",
        "The following object is masked from ‘package:base’:\n\n    expand.grid\n\n",
        "\nAttaching package: ‘IRanges’\n\n",
        "The following object is masked from ‘package:grDevices’:\n\n    windows\n\n",
        "> ",
        "## Install and load required packages for the first time",
        "> ",
        "installAndLoadRequiredPackages <- function(){",
        "+ ",
        "  packages.vec <- c(\"shiny\", \"devtools\", \"heatmap3\", \"WGCNA\", \"readxl\", ",
        "+ ",
        "                           \"openxlsx\", \"BiocManager\", \"tidyverse\", \"allez\", \"ggdendro\")",
        "+ ",
        "  packages.to.install <- packages.vec[!packages.vec %in% installed.packages()[,\"Package\"]]",
        "+ ",
        "  if(packages.to.install>0){",
        "+ ",
        "    for(i in 1:length(packages.to.install)){",
        "+ ",
        "    if(packages.to.install == \"allez\"){",
        "+ ",
        "      library(devtools)",
        "+ ",
        "      install_github(repo = \"atbroman/allez\", dependencies = TRUE)",
        "+ ",
        "    }else if(packages.to.install == \"WGCNA\"){",
        "+ ",
        "      BiocManager::install(\"WGCNA\")",
        "+ ",
        "    }",
        "+ ",
        "      install.packages(packages.to.install)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  lapply(packages.vec, library, character.only = TRUE)",
        "+ ",
        "}",
        "> ",
        "installAndLoadRequiredPackages()",
        "Error in if (packages.to.install > 0) { : argument is of length zero\n",
        "> ",
        "remove.packages(\"allez\", lib=\"~/R/win-library/4.0\")",
        "> ",
        "remove.packages(\"tidyverse\", lib=\"~/R/win-library/4.0\")",
        "> ",
        "installAndLoadRequiredPackages()",
        "Error in install.packages : Updating loaded packages\nError in install.packages : Updating loaded packages\n",
        "Bioconductor version 3.11 (BiocManager\n  1.30.10), ?BiocManager::install for help\n",
        "\nAttaching package: ‘BiocManager’\n\n",
        "The following object is masked from ‘package:devtools’:\n\n    install\n\n",
        "Error in FUN(X[[i]], ...) : there is no package called ‘tidyverse’\n",
        "In addition: ",
        "Warning messages:\n",
        "1: ",
        "In if (packages.to.install > 0) { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "2: ",
        "In if (packages.to.install == \"allez\") { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "3: ",
        "In if (packages.to.install == \"WGCNA\") { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "4: ",
        "In if (packages.to.install == \"allez\") { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "5: ",
        "In if (packages.to.install == \"WGCNA\") { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "\nRestarting R session...\n\n"
    ]
}